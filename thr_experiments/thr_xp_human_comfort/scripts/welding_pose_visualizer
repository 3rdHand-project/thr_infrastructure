#!/usr/bin/env python
import rospy
import json
import tf
from os.path import join
from rospkg import RosPack
from human_moveit_config.human_model import HumanModel
from baxter_commander.persistence import dicttostate
import sys
from visualization_msgs.msg import Marker
from transformations import list_to_pose


class PoseVisualizer(object):
    def __init__(self, id_expe, file):
        rospack = RosPack()
        pkg_expe = rospack.get_path('thr_xp_human_comfort')
        res_dir = join(pkg_expe, 'results', 'welding_simulation', id_expe)
        with open(join(res_dir, file + '.json')) as datafile:
            self.data = json.load(datafile)
        self.tfb = tf.TransformBroadcaster()
        rospy.sleep(1)
        self.rate = rospy.Rate(3)
        self.model = HumanModel()
        self.pub = rospy.Publisher('visualization_marker', Marker, queue_size=10)
        self.create_object_marker()

    def create_object_marker(self):
        self.marker_circle = Marker()
        self.marker_circle.header.frame_id = '/human/base'
        self.marker_circle.id = 0
        self.marker_circle.type = 3
        self.marker_circle.action = 0
        self.marker_circle.scale.x = 0.4
        self.marker_circle.scale.y = 0.4
        self.marker_circle.scale.z = 0.015
        self.marker_circle.color.a = 1.0
        self.marker_circle.color.r = 0.0
        self.marker_circle.color.g = 1.0
        self.marker_circle.color.b = 0.0

        self.marker_square = Marker()
        self.marker_square.header.frame_id = '/human/base'
        self.marker_square.id = 1
        self.marker_square.type = 1
        self.marker_square.action = 0
        self.marker_square.scale.x = 0.5
        self.marker_square.scale.y = 0.5
        self.marker_square.scale.z = 0.01
        self.marker_square.color.a = 1.0
        self.marker_square.color.r = 0.0
        self.marker_square.color.g = 0.0
        self.marker_square.color.b = 1.0

    def send_state(self, state):
        self.model.send_state(state)

    def send_object_pose(self, obj_pose):
        self.marker_circle.pose = list_to_pose(obj_pose).pose
        self.marker_circle.header.stamp = rospy.Time.now()
        self.marker_square.pose = list_to_pose(obj_pose).pose
        self.marker_square.header.stamp = rospy.Time.now()
        self.pub.publish(self.marker_circle)
        self.pub.publish(self.marker_square)

    def run(self):
        i = 0
        indexes = [0, 3, 5, 7, 9, 6, 4, 2]
        dict_states = self.data['state']
        obj_pose = self.data['object_pose']
        nb_states = len(indexes)
        while not rospy.is_shutdown():
            self.send_state(dicttostate(dict_states[indexes[i]]))
            self.send_object_pose(obj_pose)
            i = (i + 1) % nb_states
            self.rate.sleep()
            # raw_input()


if __name__ == '__main__':
    rospy.init_node('welding_pose_visalizer')
    visu = PoseVisualizer(sys.argv[1], sys.argv[2])
    visu.run()
